/* Shared CRT overlay helpers.
   Apply the `crt` class to a container and add optional child elements
   with the `crt__scanlines`, `crt__vignette`, and `crt__glow` classes.
   Per-game tweaks can override the CSS variables declared below. */

:root {
  /* Base tunable knobs (games override these per-container). */
  --crt-border-radius: 12px;
  --crt-overlay-radius: inherit;

  --crt-scanline-color: rgba(255, 255, 255, 0.1);
  --crt-scanline-thickness: 1px;
  --crt-scanline-spacing: 2px;
  --crt-scanline-opacity: 0.55;
  --crt-scanline-blend: overlay;
  --crt-aperture-width: 3px;
  --crt-aperture-r: rgba(255, 0, 0, 0.05);
  --crt-aperture-g: rgba(0, 255, 0, 0.05);
  --crt-aperture-b: rgba(0, 128, 255, 0.05);
  --crt-scanline-animation: crt-scanlines 12s linear infinite;
  --crt-flicker-duration: 1.2s;
  --crt-flicker-animation: crt-flicker var(--crt-flicker-duration) steps(2, end) infinite;

  --crt-vignette-gradient: radial-gradient(ellipse at center,
    rgba(0, 0, 0, 0.08) 0%,
    rgba(0, 0, 0, 0.45) 70%,
    rgba(0, 0, 0, 0.75) 100%);
  --crt-vignette-opacity: 1;
  --crt-vignette-blend: overlay;
  --crt-vignette-animation: crt-flicker var(--crt-flicker-duration) steps(2, end) infinite;
  --crt-vignette-filter: none;

  --crt-noise-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="64" height="64"><filter id="n"><feTurbulence type="fractalNoise" baseFrequency="0.9" numOctaves="1"/></filter><rect width="100%" height="100%" filter="url(%23n)" opacity="0.08"/></svg>');
  --crt-noise-size: 256px 256px;

  --crt-glow-shadow: inset 0 0 60px rgba(255, 255, 255, 0.15);
  --crt-glow-opacity: 1;
  --crt-glow-blend-mode: screen;
  --crt-glow-filter: none;

  --crt-flicker-low: 0.78;
  --crt-flicker-high: 0.94;
}

.crt {
  position: relative;
  border-radius: var(--crt-border-radius, 12px);
}

.crt[data-crt-jitter] {
  will-change: transform;
  transform: translate3d(var(--crt-jitter-x, 0px), var(--crt-jitter-y, 0px), 0);
}

.crt__scanlines,
.crt__vignette,
.crt__glow {
  position: absolute;
  inset: 0;
  pointer-events: none;
  border-radius: var(--crt-overlay-radius, inherit);
}

.crt__glow {
  z-index: 2;
  box-shadow: var(--crt-glow-shadow);
  opacity: var(--crt-glow-opacity, 1);
  mix-blend-mode: var(--crt-glow-blend-mode, screen);
  filter: var(--crt-glow-filter, none);
}

.crt__scanlines {
  z-index: 3;
  background:
    repeating-linear-gradient(
      to bottom,
      transparent 0,
      transparent calc(var(--crt-scanline-spacing, 2px) - var(--crt-scanline-thickness, 1px)),
      var(--crt-scanline-color) calc(var(--crt-scanline-spacing, 2px) - var(--crt-scanline-thickness, 1px)),
      var(--crt-scanline-color) var(--crt-scanline-spacing, 2px)
    ),
    repeating-linear-gradient(
      to right,
      var(--crt-aperture-r) 0 1px,
      var(--crt-aperture-g) 1px 2px,
      var(--crt-aperture-b) 2px 3px
    );
  background-size: auto, var(--crt-aperture-width, 3px);
  mix-blend-mode: var(--crt-scanline-blend, overlay);
  opacity: var(--crt-scanline-opacity, 0.55);
  animation: var(--crt-scanline-animation), var(--crt-flicker-animation);
}

.crt__vignette {
  z-index: 4;
  background:
    var(--crt-vignette-gradient),
    var(--crt-noise-image);
  background-size: cover, var(--crt-noise-size, 256px 256px);
  mix-blend-mode: var(--crt-vignette-blend, overlay);
  opacity: var(--crt-vignette-opacity, 1);
  animation: var(--crt-vignette-animation);
  filter: var(--crt-vignette-filter, none);
}

@keyframes crt-flicker {
  0% { opacity: var(--crt-flicker-low, 0.78); }
  50% { opacity: var(--crt-flicker-high, 0.94); }
  100% { opacity: var(--crt-flicker-low, 0.82); }
}

@keyframes crt-scanlines {
  from { background-position: 0 0, 0 0; }
  to { background-position: 0 var(--crt-scanline-spacing, 2px), 0 0; }
}

@media (prefers-reduced-motion: reduce) {
  .crt__scanlines,
  .crt__vignette {
    animation: none !important;
  }
  .crt[data-crt-jitter] {
    transform: none !important;
  }
}
